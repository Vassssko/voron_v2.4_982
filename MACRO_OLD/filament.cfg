[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  ##### set default parameter value #####
  {% set wait = params.WAIT|default(0) %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_FILAMENT_BALL
  # Ball up the filament tip
  G92 E0       ; zero the extruder
  M82          ; absolute extrusion
  G1 E2 F3600
  G1 E0 F3600
  G1 E4 F3600
  G1 E0 F3600
  G1 E8 F3600
  G1 E0 F3600
  M83          ; relative extrusion
  G1 E-25 F3600
  G4 P{wait|int * 1000}
  RESTORE_GCODE_STATE NAME=STATE_FILAMENT_BALL

[gcode_macro FILAMENT_LOAD]
description: Load filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set load = printer['gcode_macro _USER_VARIABLE'].load_distance %}
  {% set extrude = printer['gcode_macro _USER_VARIABLE'].load_extrude %}
  {% set retract = printer['gcode_macro _USER_VARIABLE'].retract_end|float * -1 %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
   ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  {% set loadTemp = params.TEMP|default(0) %}
  {% if loadTemp == 0 %}
    {% set loadTemp = extruder_target%}
  {% endif %}

  ##### calc movement high #####
  {% if act_z < z_hop %}
    {% set move_z = z_hop %}
  {% else %}
    {% set move_z = act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    {% if ena_runout == 'motion' %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if ena_runout == 'switch' %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    ## Move to waste bin
    _CG28                          ; home if not already homed
    G90                            ; absolute positioning
    G1 Z{move_z} F1800             ; move head to minimum
    G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
        {% if ena_neo == 'true' %} _LCD_KNOB COLOR=PINK {% endif %}
    {% set temp_changed = false %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      {% set temp_changed = true %}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    {% if loadTemp != extruder_target %}
      {% set temp_changed = true %}
      M109 S{loadTemp}
    {% endif %}
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RESTORE {% endif %}
    G1 Z{purge_pos[2]} F1800 
    M83                  ; set extruder to relative
    G1 E{load} F1800     ; quickly load 90mm filament
    G1 E{extrude} F300   ; slower extrusion for hotend path
    G1 E{retract} F1000 ; retract 
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
    # clean nozzle
    _WIPE
    G1 Z{move_z} F1800        
    G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
    # restore old extruder temperature
    {% if temp_changed %}
      M109 S{extruder_target}
    {% endif %}
    {% if ena_runout == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}
    {% if ena_runout == 'switch' %}
      _PRINT_AR T="RUNOUT switch Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}

    _PRINT_AR T="Filament loaded"
    RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}
 
[gcode_macro FILAMENT_UNLOAD]
description: Unload filament and disable runout while running
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set unload = printer['gcode_macro _USER_VARIABLE'].unload_distance %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}

  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  {% set loadTemp = params.TEMP|default(0) %}
  {% if loadTemp == 0 %}
    {% set loadTemp = extruder_target%}
  {% endif %}

  ##### end of definitions #####
  ## Home if not homed already.
  _CG28
    G90                            ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900            ; move head up
  {% endif %}
  G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location

  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
    {% if ena_runout == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if ena_runout == 'switch' %}
      _PRINT_AR T="RUNOUT Switch Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=PINK {% endif %}
    {% set temp_changed = false %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      {% set temp_changed = true %}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    {% if loadTemp != extruder_target %}
      {% set temp_changed = true %}
      M109 S{loadTemp}
    {% endif %}
    # Ball up the filament tip and retract out past the extruder gears
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RESTORE {% endif %}
    _FILAMENT_BALL WAIT=3
    M83 ; Relative extrusion
    G1 E-{unload} F3000
    M400
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
    # restore old extruder temperature
    {% if temp_changed %}
      M109 S{extruder_target}
    {% endif %}
    _PRINT_AR T="Filament unloaded"
    RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %}

[gcode_macro NOZZLECLEAN]
description: Move to bucket and scrub nozzle
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                                    ; home if not already homed
  G90                                      ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900                       ; move head up
  {% endif %}
  G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp}      ; heat extruder and wait
  {% endif %}
  G1 Z{purge_pos[2]} F900  ; lower Z
  G92 E0                   ; reset Extruder
  M83                      ; relative extrusion
  G1 E5.00 F500            ; purge filament (5mm)
  G1 E5.00 F800            ; purge filament (5mm)
  G1 E-0.5 F800            ; retract filament (0.5)
 
  _WIPE
  # restore old extruder temperature
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
description: Helper: Wipe nozzle at bucket
gcode:
  ##### get user defines #####
  {% set wipe_cnt = printer['gcode_macro _USER_VARIABLE'].wipe_cnt|int %}
  {% set wipe_start_pos = printer['gcode_macro _USER_VARIABLE'].wipe_start %}
  {% set wipe_end_pos = printer['gcode_macro _USER_VARIABLE'].wipe_end %}
  {% set wipe_offset = printer['gcode_macro _USER_VARIABLE'].wipe_offset|float %}
  ##### end of definitions #####
  G90 ; absolute positioning
  G0 X{wipe_start_pos[0]} Y{wipe_start_pos[1]} Z{wipe_start_pos[2]} F4000
  # move head diagonal to brush
  {% for wipe in range(0, wipe_cnt) %}
    {% for coordinate in [wipe_start_pos[0], wipe_end_pos[0]] %}
      G0 X{coordinate} Y{wipe_start_pos[1] + wipe_offset * wipe} F4000
    {% endfor %}
  {% endfor %}
  G0 X{wipe_end_pos[0]} Y{wipe_end_pos[1]} Z{wipe_end_pos[2]} F4000
    
[gcode_macro PRIME_LINE]
description: Purge nozzle front left
gcode:
  ##### get user defines #####
  {% set start_xy = printer['gcode_macro _USER_VARIABLE'].prime_start_xy %}
  {% set dir = printer['gcode_macro _USER_VARIABLE'].prime_dir|string %}
  {% set lenght = printer['gcode_macro _USER_VARIABLE'].prime_lenght|float %}
  {% set seg = printer['gcode_macro _USER_VARIABLE'].prime_seg|int %}
  {% set extrude_per_seg = printer['gcode_macro _USER_VARIABLE'].prime_extrude_per_seg|float %}
  {% set prime_z = printer['gcode_macro _USER_VARIABLE'].prime_z|float %}
  {% set move_between_lines = printer['gcode_macro _USER_VARIABLE'].prime_dist|float %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  ##### get parameter and set default #####
  {% set prime_height = params.PRIME_HEIGHT|default(prime_z)|float %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### calculate prime line moves #####
  {% set seg_delta = lenght / seg %}
  {% if dir == 'X+' %}
    {% set first_line = 'X%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'X-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set move_to_side = 'Y%s' % (move_between_lines) %}
  {% elif dir == 'X-' %}
    {% set first_line = 'X-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'X%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set move_to_side = 'Y%s' % (move_between_lines) %}
  {% elif dir == 'Y+' %}
    {% set first_line = 'Y%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'Y-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
   {% set move_to_side = 'X%s' % (move_between_lines) %}
  {% elif dir == 'Y-' %}
    {% set first_line = 'Y-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'Y%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set move_to_side = 'X%s' % (move_between_lines) %}
  {% else %}
    {action_raise_error("_USER_VARIABLE.prime_dir is not spezified as X+, X-, Y+ or Y-")}
  {% endif %} 
  ##### end of definitions #####
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                   ; home if not already homed
  G92 E0                                  ; reset Extruder
  G90                                     ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900                      ; move head up
  {% endif %}
  G1 X{start_xy[0]} Y{start_xy[1]} F18000 ; move to start position
  G1 Z{prime_height} F900                 ; move Z Axis down
  G91                                     ; relative positioning
  {% for segment in range(seg) %}         ; draw the first line
    G1 {first_line}
  {% endfor %}    
  G1 {move_to_side}                       ; move to side
  {% for segment in range(seg) %}         ; draw the second line
    G1 {second_line}
  {% endfor %}
  G1 Z{z_hop} F1500                       ; move Z Axis up
  G92 E0                                  ; reset Extruder
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1