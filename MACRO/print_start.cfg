[gcode_macro PRINT_START]
##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  RETRACT_LEN   : Retract length for firmware retracts
##  RETRACT_SPD   : Retract speed for firmware retracts
##  System Varables
variable_redo_qgl: 'true'
# change this to define the wait time per call
variable_extruder: 245
variable_bed: 100
variable_chamber: 50
variable_chamber_delta: 5
variable_endstop: 0
variable_retract_len: 0.75
variable_retract_spd: 70
variable_print_info: 'true'
variable_prime_height: 0
variable_z_adjust: 0.0

## Valid state 
##   Prepare : decision if heat Soak is needed 
##   HeatSoak: loop the time specified with SOAK
##   Final   : all what needs to be done after wait timet
variable_state: 'Prepare'
variable_first: 'true'
variable_soak: 0.35
variable_pwm: 1
variable_avgpwm: 1
variable_tests: 0
variable_left: 30
variable_clean2: False

gcode:
  SET_PIN PIN=_hour_counter VALUE=1
  {% set bed_temp = params.BED_TEMP|default(100) %}
  {% set extruder_temp = params.EXTRUDER_TEMP|default(245) %}
  {% set pre_extruder = extruder_temp|float * 1.0 %}
  {% set chamber = params.CHAMBER_TEMP|default(50) %}
  {% set soak = params.SOAK|default(0.35) %}
  {% set retract_len = params.RETRACT_LEN|default(0.75) %}
  {% set retract_spd = params.RETRACT_SPD|default(70) %}
  {% set actPwm = printer.heater_bed.power|float %}
    #############  Get user defines  #############
  {% set park_pos = printer['gcode_macro _USER_VARIABLE'].park_bed %}
  {% set soak_bed_up = printer['gcode_macro _USER_VARIABLE'].print_start_bed_up|int %}
  {% set prime_mult = printer['gcode_macro _USER_VARIABLE'].print_start_prime_mult|float %}

  #############  Get hardware enables  #############
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_chamber = printer['gcode_macro _USER_VARIABLE'].chamber|lower %}
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight|lower %}
  {% set ena_filter = printer['gcode_macro _USER_VARIABLE'].filter|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  {% set ena_relay = printer['gcode_macro _USER_VARIABLE'].relay|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

#############  BED temp values  #############
  # get actual temp from extra sensor or heater sensor
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature|int %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature|int %}
  {% endif %}
  # get max allow bed temp from config. Lower it by 5C to avoid shutdown
  {% set cfg_bed_max = printer.configfile.settings.heater_bed.max_temp|int - 5 %}

  {% if state == 'Prepare' %}  
      _PRINT_AR T="Preparation stage"
    #############  Store input parameters only at first execution  #############
    {% set bed_temp = params.BED_TEMP|default(100)|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(245)|int %}
    {% set chamber_temp = params.CHAMBER_TEMP|default(50)|int %}
    {% set soak = params.SOAK|default(30)|int * 60 %}
    {% set delta_b = params.DELTA_B|default(10)|int %}
    {% set delta_c = params.DELTA_C|default(5)|int %}
    {% set chamber_soak = params.CHAMBER_SOAK|default(15)|int * 60 %}
    {% set extra_soak = params.EXTRA_SOAK|default('true') %}
    {% set p_height = params.LAYER_HEIGHT|default(0.0)|float * prime_mult %}
    {% set adjust_z = params.Z_ADJUST|default(0.0)|float %}
    #############  Variable Setup  #############
    {% set targetBed = bed_temp - delta_b %}
    {% if cfg_bed_max > bed_temp + soak_bed_up %}
      {% set bed_soak_temp = bed_temp + soak_bed_up %}
    {% else %}
      {% set bed_soak_temp = cfg_bed_max %}
    {% endif %}

      SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=print_info VALUE='"true"'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=clean2 VALUE=False
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={extruder_temp}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed VALUE={bed_temp}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber VALUE={chamber_temp}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_delta VALUE={delta_c}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=left VALUE=30
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=prime_height VALUE={p_height}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=z_adjust VALUE={adjust_z}
      #############  Get filament runout info  #############
      {% if ena_runout == 'switch' %}
        SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
        {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
          {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
        {% elif 'virtual_sdcard' in printer and filament_loaded in printer.save_variables.variables %}
          {% set filament_detected = printer.save_variables.variables.filament_loaded %}
        {% else %}
          {% set filament_detected = 'true' %}
        {% endif %}
      {% elif ena_runout == 'motion' %}
        {% if printer['filament_motion_sensor runout'].enabled|lower == 'true' %}
          {% set filament_detected = printer['filament_motion_sensor runout'].filament_detected|lower %}
        {% elif 'virtual_sdcard' in printer and filament_loaded in printer.save_variables.variables %}
          {% set filament_detected = printer.save_variables.variables.filament_loaded %}
        {% else %}
          {% set filament_detected = 'true' %}
        {% endif %}
      {% elif ena_runout == 'file' %}
        {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% else %}
        {% set filament_detected = 'true' %}
      {% endif %}
      #############  Definition done  #############
      _RUNOUT_INFO
      #if everything's OK then go on
      {% if filament_detected == 'true' %}
          _CASELIGHT_ON
          SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
         ## {% if ena_filter == 'true' %} FILTER_ON {% endif %} ; activate filter
          {% if ena_neo == 'true' %} _LCD_KNOB COLOR=PINK BLINK=1  {% endif %}
          M140 S{bed_temp|int}
          M104 S{pre_extruder|int}  ; heat bed and wait
          {% if ena_chamber == 'fan' %} M141 S0  {% endif %}   ; exhaust fan off
          _CG28                    ; home if needed
          # Move to Middle
          SET_RETRACTION RETRACT_LENGTH={retract_len|float} RETRACT_SPEED={retract_spd|int}
          G90
          G0 Z{park_pos[2]} F1800                 ; move nozzle to z high first
          G0 X{park_pos[0]} Y{park_pos[1]} F9000 ; home to get toolhead in the middle

          _PRINT_AR T="Heating Bed"
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'

          M106 S90              ; switch part cooling ~35% to move air in chamber
          M190 S{bed_temp|int}  ; heat bed and wait
          M400                  ; wait for buffer to clear
          PAUSE_BASE
          {% set pwm = printer['heater_bed'].power | float %}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=pwm VALUE={pwm}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=avgpwm VALUE={pwm}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tests VALUE=1
          _PRINT_AR T="{"T:%02d/30 P:%.3f/%.3f" % (left|int,pwm|float,soak|float)}"
          # Call the wait macro the first time
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
          UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=0.1

      {% else %}
          _PRINT_AR T="No Filament loaded, print canceled!"
          CANCEL_PRINT_BASE
          UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
      {% endif%}
      
  {% elif state == 'HeatSoak' %}  
      {% if left == 0 %}
          {% if avgpwm >= soak|float %}
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=pwm VALUE=0
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tests VALUE=0
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=left VALUE=30
          {% else %}
              {action_respond_info("Done. Mean PWM: %f" % (avgpwm|float))}
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"QGL"'
          {% endif %}
      {% endif %}
      UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=1
  {% elif state == 'QGL' %}
      _PRINT_AR T="QGL stage"  
      # set staus back to prepare for the next run 
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
      M106 S0  ; turn off part cooling fan
       {% if ena_neo == 'true' %} _LCD_KNOB COLOR=PINK  {% endif %}
      G21                                                       ; set units to millimeters
      G90                                                       ; use absolute coordinates
      M83                                                       ; use relative distances for extrusion
      {%  if printer.quad_gantry_level.applied %}
        _PRINT_AR T="QGL already done"
      {% else %}
        G32  ; home & QGL
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"QGLC"'
      UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=1
  {% elif state == 'QGLC' %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
      _PRINT_AR T="QGL check stage"  
          {% if printer.configfile.config["bed_mesh Voron-Bed_Temp-" + bed_temp|string + "C"] is defined %}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=clean2 VALUE=True
      {% endif %}
      {%  if printer.quad_gantry_level.applied %}
        _PRINT_AR T="QGL done successfully"
        {% if ena_chamber == 'fan' %} M141 S{chamber} {% endif %} ; set target temp for exhaust fan
        BED_MESH_LOAD AUTO=true
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Extruder"'
        UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=0.1
      {% else %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
        _PRINT_AR T="QGL failed, print canceled!"
        CANCEL_PRINT_BASE
        UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
      {% endif %}
  {% elif state == 'Extruder' %}  
      _PRINT_AR T="Extruder stage"
      M109 S{extruder}
      _PRINT_AR T="Extruder is heated"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"ZCAL"'
      UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=0.1
  {% elif state == 'ZCAL' %}
      _PRINT_AR T="ZCal Stage"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
      # NOZZLECLEAN
      G10
      G28 Z
      G1 Z10 F900            ; move head up
      {% if ena_auto_z_offset == 'z_calib' %} 
        {% set zcal = printer['z_calibration'].last_query %}
        {% if zcal %}
        _PRINT_AR T="Z calibration already done!"
        {% else %}
        RESUME_BASE
        CALIBRATE_Z
        PAUSE_BASE
        {% endif %} 
      {% endif %}
      M400
      _PRINT_AR T="Going to Final"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'     
      UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=0.1
  {% elif state == 'Final' %}
      _PRINT_AR T="Final stage"  
      RESUME_BASE
      # set staus back to prepare for the next run 
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
        {% set zcal = printer['z_calibration'].last_query %}
        {% if zcal %}
          _PRINT_OFFSET
          M117 Heating Extruder
          M104 S{extruder|int} ; heat extruder and wait
          PRIME_LINE
          G92 E0              ; reset Extruder
          M83                 ; relative extrusion
          G90                                                       ; use absolute coordinates
          M83                                                       ; use relative distances for extrusion    
          UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
        {% else %}
          _PRINT_AR T="Z calibration failed, print canceled!"
          CANCEL_PRINT_BASE
          UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
        {% endif %}
  {% endif %}


## Wait interval macro to break the loop
[delayed_gcode START_PRINT_WAIT]
gcode:
 # Print remaining time
  {% if printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
      {% set pwm = printer['heater_bed'].power | float %}
      {% set totalpwm = printer["gcode_macro PRINT_START"].pwm|float %}
      {% set tests = printer["gcode_macro PRINT_START"].tests|int + 1 %}
      {% set left = printer["gcode_macro PRINT_START"].left|int - 1 %}
      {% set soak = printer["gcode_macro PRINT_START"].soak | float %}
      {% set avgpwm = ((totalpwm+pwm)/tests)|float %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=avgpwm VALUE={avgpwm}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=pwm VALUE={(totalpwm+pwm)|float}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tests VALUE={tests}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=left VALUE={left}

      M117 S{'T:%02d' % left|int}{'/30 P:%.2f' % (avgpwm|float)}{'/%.2f' % (soak|float)}
  {% endif %}
  # Check CANCLE_PRINT was executed
  {% if printer["gcode_macro CANCEL_PRINT"].execute == 'false' %}
    # Junp back to PRINT_START
    PRINT_START
  {% else %}
    # break loop
    # insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}