#####################################################################
#                 LCD menu that works with mainsail                 #
#####################################################################
#   Main
#   ...
#   + SD Card
#       + Show loaded file
#       + Load File (only if not printing and no file loaded)
#       + Unload File (only if not printing and a file is loaded)
#       + Start printing (only if not printing and a file is loaded)
#       + Pause printing (only while printing)
#       + Resume printing (only while paused)
#       + Cancel printing (only while paused)

[menu __main __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: SD Card

[menu __main __sdcard __file]
type: command
name: File: {printer.print_stats.filename}
index: 0

[menu __main __sdcard __load]
type: vsdlist
#type: list
#event_sender: __vsdfiles
enable: {not printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Load file
index: 1

[menu __main __sdcard __unload]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Unload file
index: 2
gcode:
  # back is needed to reload the modified menu structure
  {menu.back()}
  SDCARD_RESET_FILE

[menu __main __sdcard __start]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Start print
index: 3
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  M24

[menu __main __sdcard __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause print
gcode:
  # back is needed to reload the modified menu structure
  {menu.back()}
  PAUSE

[menu __main __sdcard __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  RESUME

[menu __main __sdcard __cancel]
type: command
enable: {printer.print_stats.state == "paused"}
name: Cancel print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  CANCEL_PRINT

#####################################################################
# 	Display Menu definition                                        #
#####################################################################
#                  Removed Items of the Stock menu                  #
#####################################################################
##  Octoprint 
[menu __main __octoprint]
type: disabled

##  PreHeat
[menu __main __temp __preheat_pla]
type: disabled

[menu __main __temp __preheat_abs]
type: disabled

##  use own load and unload macro
[menu __main __filament __loadf]
type: disabled

[menu __main __filament __loads]
type: disabled

[menu __main __filament __unloadf]
type: disabled

[menu __main __filament __unloads]
type: disabled

##  Delta Calibration
[menu __main __setup __calib __delta_calib_auto]
type: disabled

[menu __main __setup __calib __delta_calib_man]
type: disabled

#####################################################################
#                  Overload Items of the Stock menu                 # 
#####################################################################
  
#####################################################################
#                   Added Items to the Stock menu                   #
#####################################################################
##  Add filament load and unload macro
[menu __main __filament __load]
type: command
name: Load Filament
gcode:
  FILAMENT_LOAD
  
[menu __main __filament __unload]
type: command
name: Unload Filament
gcode:
  FILAMENT_UNLOAD
    
## PROBE_CALIBRATE
[menu __main __setup __calib __probe_Z_offset]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Probe Z offset

[menu __main __setup __calib __probe_Z_offset __start]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Start probing
gcode:
    PROBE_CALIBRATE

[menu __main __setup __calib __probe_Z_offset __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __probe_Z_offset __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 5
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}
    
[menu __main __setup __calib __probe_Z_offset __test_z_live]
type: input
name: Test Z :{'%05.3f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: -5
input_max: 15
input_step: 0.05
realtime: True
gcode:
  TESTZ Z={menu.input - printer.gcode_move.gcode_position.z}

[menu __main __setup __calib __probe_Z_offset __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __probe_Z_offset __abort]
type: command
name: Abort
gcode: ABORT

## Z_ENDSTOP_CALIBRATE
[menu __main __setup __calib __z_endstop]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Z endstop

[menu __main __setup __calib __z_endstop __start]
type: command
name: Start probing
gcode:
    Z_ENDSTOP_CALIBRATE

[menu __main __setup __calib __z_endstop __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __z_endstop __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 5
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __z_endstop __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __z_endstop __abort]
type: command
name: Abort
gcode: ABORT

## Park Position
[menu __main __control __park_pos]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
index: 0
name: Positon: {['Bed','Center','Rear','Front', 'FrontLow'][menu.input|int]}
input: 0
input_min: 0
input_max: 4
gcode:
    {%- if menu.event == 'long_click' -%}
      {%- if menu.input|int == 1 -%}
        PARKCENTER
      {%- elif menu.input|int == 2 -%}
        PARKREAR
      {%- elif menu.input|int == 3 -%}
        PARKFRONT
      {%- elif menu.input|int == 4 -%}
        PARKFRONTLOW
      {%- else -%}
        PARKBED
      {%- endif -%}
    {%- endif -%}

### klipper display menu statistic ###
[menu __main __statistic]
type: list
enable: {not printer.idle_timeout.state == "Printing" and 'save_variables' in printer}
name: Statistics

[menu __main __statistic __totaltime]
type: command
enable: True
name: Time of Operation
gcode:
  {menu.exit()}
  _DISPLAY_PRINT_TIME PREFIX=Total SECONDS={printer.save_variables.variables.totalprintingtime}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  
[menu __main __statistic __filament]
type: command
enable: True
name: Total Filament used
gcode:
  {menu.exit()}
  M117 Filerment {'%.4f' % (printer.print_stats.filament_used|float / 1000.0)}m
  {action_respond_info("Total Filament printed: %.4fm" % (printer.print_stats.filament_used|float / 1000.0))}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[menu __main __statistic __filtertime]
type: command
enable: True
name: Time since Filter change
gcode:
  {menu.exit()}
  _DISPLAY_PRINT_TIME PREFIX=Filter SECONDS={printer.save_variables.variables.filterusetime}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[menu __main __statistic __servicetime]
type: command
enable: True
name: Time since Service
gcode:
  {menu.exit()}
  _DISPLAY_PRINT_TIME PREFIX=Service SECONDS={printer.save_variables.variables.lastservicetime}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  
  
[menu __main __statistic __rst_filter]
type: command
enable: True
name: Reset Filter time
gcode:
  {menu.exit()}
  RST_FILTER

    
[menu __main __statistic __rst_service]
type: command
enable: True
name: Reset Service time
gcode:
  {menu.exit()}
  RST_SERVICE

[menu __main __control __runoutonoff_switch]
type: input
enable: {'filament_switch_sensor runout' in printer.configfile.settings}
name: Runout: {'ON ' if menu.input else 'OFF'}
input: {printer['filament_switch_sensor runout'].enabled}
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE={menu.input|int}
  
[menu __main __control __runoutonoff_motion]
type: input
enable: {'filament_motion_sensor runout' in printer.configfile.settings}
name: Runout: {'ON ' if menu.input else 'OFF'}
input: {printer['filament_motion_sensor runout'].enabled}
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE={menu.input|int}

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    {% if menu.input %}
      _CASELIGHT_ON
    {% else %}
      _CASELIGHT_OFF
    {% endif %}

[menu __main __control __runoutonoff_switch]
type: input
enable: {'filament_switch_sensor runout' in printer.configfile.settings}
name: Runout: {'ON ' if menu.input else 'OFF'}
input: {printer['filament_switch_sensor runout'].enabled}
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE={menu.input|int}
  
[menu __main __control __runoutonoff_motion]
type: input
enable: {'filament_motion_sensor runout' in printer.configfile.settings}
name: Runout: {'ON ' if menu.input else 'OFF'}
input: {printer['filament_motion_sensor runout'].enabled}
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
  SET_FILAMENT_SENSOR SENSOR=runout ENABLE={menu.input|int}

[menu __main __poweroff]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Turn off Voron
gcode:
     M117 Shutdown_RPI
     M118 Shutdown_RPI
     _M81
     { menu.exit() }    
     UPDATE_DELAYED_GCODE ID=shutdown_machine DURATION=1 

##  Disable stock config
[menu __main __control __fanonoff]
type: disabled

[menu __main __control __fanspeed]
type: disabled

## Add menu for fan, chamber and filter
[menu __main __control __fan]
type: list
name: Fan 
index: 5

[menu __main __control __fan __partcooling]
type: list
enable: {'fan' in printer}
name: Fan {'%3d' % (printer.fan.speed*100)}%

[menu __main __control __fan __chamber]
type: list
enable: {'temperature_fan chamber' in printer}
name: Chamber {'%2dC' % (printer['temperature_fan chamber'].target) if printer['temperature_fan chamber'].target else 'OFF'}

[menu __main __control __fan __filter]
type: list
enable: {'fan_generic filter' in printer}
name: Filter {'%3d' % (printer['fan_generic filter'].speed*100)}%

[menu __main __control __fan __partcooling __fanonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
  M106 S{255 if menu.input else 0}

[menu __main __control __fan __partcooling __fanspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
  M106 S{'%d' % (menu.input*255)}

[menu __main __control __fan __chamber __chamberonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: 0
input_max: 1
input_step: 1
gcode:
  {% set temp_on = printer["gcode_macro _USER_VARIABLE"].vent_on|int %}
  M141 S{temp_on if menu.input else 0}    
    
[menu __main __control __fan __chamber __chamberfanspeed]
type: input
name: Temp: {'%2dC' % (menu.input) if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: {printer.configfile.settings['temperature_fan chamber'].min_temp|int}
input_max: {printer.configfile.settings['temperature_fan chamber'].max_temp|int}
input_step: 1
gcode:
    M141 S{'%d' % (menu.input)}

[menu __main __control __fan __filter __filteronoff]
type: input
name: Toggle: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
 {% if menu.input %}
   FILTER_ON
 {% else %}
   _SET_FILTER S=0.0
 {% endif %}

[menu __main __control __fan __filter __filterspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    _SET_FILTER S={menu.input}

[menu __main __poweroff]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Turn off Voron
gcode:
     M117 Shutdown
     M118 Shutdown
     _M81
     { menu.exit() }    
     UPDATE_DELAYED_GCODE ID=shutdown_machine DURATION=1 